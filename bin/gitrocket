#!/usr/bin/env bash

GITROCKET_URL_SRC="https://github.com/Brodylive/GitRocket.git"
GITROCKET_PATH="$HOME/.gitrocket"
GITROCKET_SCRIPT="$GITROCKET_PATH/bin/gitrocket"

##################################################################
# Installation procedure
if [[ ! -f "$GITROCKET_SCRIPT" ]]; then
    if [[ ! -d "$GITROCKET_PATH" ]]; then
        mkdir -p ${GITROCKET_PATH}
    fi
        cd ${GITROCKET_PATH}

    if [[ $(basename $0) != "gitrocket" ]]; then
        echo -e "\n\t \033[0;1;33m Downloading sources"
        git clone ${GITROCKET_URL_SRC} .
    fi
fi

# Add to profile
for FILE in $HOME/.profile $HOME/.bash_profile $HOME/.bashrc; do
    if [[ -f ${FILE} ]]; then
        if [[ $(grep -s "$GITROCKET_PATH" ${FILE}) ]]; then
            unset FILE; break
        fi
    fi
done

if [[ -f ${FILE} ]]; then
    echo -e "\n\t \033[0;1;33m Add GitRocket to your $FILE"
    echo "source $GITROCKET_SCRIPT" >> ${FILE}
    source ${FILE}
    return 0
fi



##################################################################
# MODULES

function updateGit() {
   pushd . &>/dev/null
   echo -e "\n $COLOR_DARK_GRAY Changing directory $COLOR_NONE"
   cd $GITROCKET_PATH
   echo -e "\n $COLOR_DARK_GRAY Pulling sources $COLOR_NONE"
   pull
   echo -e "\n $COLOR_DARK_GRAY Pop to previous directory $COLOR_NONE"
   popd &>/dev/null
}

clone()
{
  echo -ne "\n\t\033[0;37m‚òÑüí´ uri git ‚û£ $COLOR_NONE"
  read uri
  echo -e "\n $COLOR_DARK_GRAY Cloning repository... $COLOR_NONE\n"

  git clone ${uri} $1 || {
    error "$ERROR_CLONE"
    return 1
  } 

  echo -e "\n $COLOR_DARK_GRAY Cloning done. $COLOR_NONE"

  cd "$1" || {
    error "$ERROR_CD"
    return 1
  } 

  # if [ "$1" != "." ]; then
  #   if [ ! -d "$1" ]; then
  #     git clone $uri $1 || {
  #       echo "1er cas"
  #       errorMsg "$ERROR_CLONE"
  #       return 1
  #     } 
  #     cd $1 || {
  #       errorMsg "$ERROR_CD"
  #       return 1
  #     }
  #   else
  #     cd $1 || {
  #       errorMsg "$ERROR_CD"
  #       return 1
  #     } 
  #     git clone $uri || {
  #       echo "2er cas"
  #       errorMsg "$ERROR_CLONE"
  #       return 1
  #     } 
  #   fi
  # else
  #   git clone $uri || {
  #     echo "3er cas"
  #     errorMsg "$ERROR_CLONE"
  #     return 1
  #   } 
  # fi

  echo -e "\n  \033[0;37m Current directory : $PWD$COLOR_NONE"
  success "${SUCCESS_CLONE}"

  return 0
}

initCommit()
{
  git_init=$(touch README.md && git add README.md && git commit -m ":tada: Initial Commit with GitRocket :rocket:" && git push -u origin master)
  if [[ ${git_init} =~ "set up to track remote branch" ]]; then
    success "${SUCCESS_INIT}"
    return 0
  else
      echo "\n $RED NEW INIT ERROR :: ${git_init} :: $COLOR_NONE"
      error "$ERROR_INIT"
      return 1
  fi
}

function before_commit()
{
  # ADD
  echo -en "\n $COLOR_LIGHT_GRAY Add files to git$COLOR_NONE \t\t"

  git_add=$(git add . 2>&1)
  if [[ ${git_add} =~ "not a git repository" ]]; then
    step_error
    error "$ERROR_NOT_GIT_REPO"
    return 1
  elif [[ ${git_add} =~ "please commit or stash them" ]]; then
    git_add=$(git add . 2>&1) || {
        step_error
        echo "\n $RED NEW ADD ERROR :: ${git_add} :: $COLOR_NONE"
        error "$ERROR_ADD"
        return 1
    }
  fi
  step_success

  echo -en " $COLOR_LIGHT_GRAY Check status of branch $COLOR_NONE \t"

  # STATUS
  git_status=$(git status)
  if [[ ${git_status} =~  "publish your local commits" ]]; then
    # SOMETHING TO PUSH
    # SYNC to do 
    step_wait
    echo -e "\n $YELLOW Preparing to publish your commits $COLOR_NONE\n"
    pull || {
        error ${ERROR_PULL}
        return 1
    }
    push && success ${SUCCESS_PUSH} || return 1
    return 1
  elif [[ ${git_status} =~ "nothing to commit" ]]; then
    # ALL'S RIGHT
    step_success
    statusbranch
    success "$SUCCESS_NOTHING"
    return 1 # to stop execution
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    # CONTINUE PROGRAM
    # branch=$(git branch 2>/dev/null | sed -n '/^\*/s/^\* //p')
    step_success
    statusbranch
    # git status # Format this display
    return 0
  else
    # BUG STATUS
    echo "\n $RED NEW STATUS ERROR :: ${git_status} :: $COLOR_NONE"
    error "$ERROR_STATUS"
    return 1
  fi
}

function statusbranch()
{
  branch=$(git branch 2>/dev/null | sed -n '/^\*/s/^\* //p')
  echo -e "\n ${COLOR_LIGHT_GRAY} On branch ${PURPLE}${branch}${COLOR_NONE}"
  
  array=$(git diff --name-status $(git merge-base $branch HEAD))
  
  if [ -n "${array}" ]; then
    echo -en " ${COLOR_LIGHT_GRAY} Added${COLOR_LIGHT_GREEN} + ${COLOR_LIGHT_GRAY}|"
    echo -en "${COLOR_LIGHT_GRAY} Modified${YELLOW} ‚Üí ${COLOR_LIGHT_GRAY}|"
    echo -e "${COLOR_LIGHT_GRAY} Removed${COLOR_LIGHT_RED} - \n"
  fi

  for arg in $array
  do
    case ${arg} in
      'M')
      echo -en "${YELLOW}  ‚Üí "
      ;;
      'A')
      echo -en "${COLOR_LIGHT_GREEN}  + "
      ;;
      'D')
      echo -en "${COLOR_LIGHT_RED}  - "
      ;;
      'R')
      echo -en "${YELLOW}  ‚Üí "
      ;;
      *)
      echo -e "$arg ${COLOR_NONE}"
      ;;
    esac
  done
  echo -e ""
}

function commit()
{
    COUNTER=0
    ANSWER="n"
    while [[  ${COUNTER} -lt 42 ]]; do
      if [[ -z "$1" ]]; then
        echo -ne " ${CYAN} üöÄ Commit this? [y/n] $COLOR_NONE"
        read ANSWER
      else
        ANSWER="y"
      fi
      case "$ANSWER" in
        y | yes | yep | yep! | yup! | yup | ouaip | zyva | 1 | true)
          write_message
          git_commit=$(git commit -m "$MESSAGE")
            if [[ ${git_commit} =~ "Could not read from remote repository" ]]; then
              step_error
              error "${ERROR_COMMIT}"
              return 1
            else
              step_success
              echo -en " $COLOR_DARK_GRAY Commit written $COLOR_NONE \t\t"
              step_success
              return 0
            fi
          ;;
        n | no | nope | np | nein | 0 | false)
          reset || return 1
          commit || return 1
          return 0
          ;;
        * )
          echo -e "\n${COLOR_LIGHT_RED}  Not an anwser, please choose below : $COLOR_NONE"
          echo -e "${ORANGE}  y = [ y | yes | yep | yep! | yup! | yup | ouaip | zyva | 1 | true ]"
          echo -e "  n = [ n | no | nope | np | nein | 0 | false ]${COLOR_NONE}"
          echo -e "  ${COLOR_DARK_GRAY}For any request, please pull request!\n"
          ;;
      esac
    done
}

function write_message() 
{
  COUNTER=0
  commit_thrown=1
  while [[  ${COUNTER} -lt 42 ]]; do
    if [[ ${commit_thrown} -eq 1 ]]; then
        selectEmoji

        echo -en "\n ${CYAN} ‚úé Label du commit ‚û£ $COLOR_NONE"
        read label
        # $selectedEmoji from SELECT
        if [[ -z $selectedEmoji ]]; then
          MESSAGE="$label"
          PRETTYMSG="$label"
        else
          MESSAGE="$selectedEmoji $label"
          PRETTYMSG="$prettyEmoji $label"
        fi
        
    fi

    echo -en "\n  ‚òû  $WHITE_ON_GREY $PRETTYMSG $CYAN GO? [y/n] $COLOR_NONE"
    read proceeded

    case "$proceeded" in
      y | yes | yep | yep! | yup! | yup | ouaip | zyva | 1 | true)
        echo -en "\n $COLOR_DARK_GRAY Connect to remote repository $COLOR_NONE "
        return 0
        ;;
      n | no | nope | np | nein | 0 | false)
        echo -en "\n $COLOR_DARK_GRAY Commit thrown $COLOR_NONE \t\t"
        commit_thrown=1
        step_success
        ;;
      * )
        echo -e "\n\t\033[5;33m Not an anwser$COLOR_NONE"
        commit_thrown=0
        ;;
    esac
  done
}

function push()
{
    echo -en " $COLOR_LIGHT_GRAY Push to remote $COLOR_NONE \t\t"
    git_push=$(git push -v 2>&1)

    if [[ ${git_push} =~ "updating local tracking ref" ]]; then
      # ALL'S RIGHT!
      echo -e "$COLOR_LIGHT_GREEN [‚úîÔ∏é] $COLOR_NONE\n"
      return 0
    elif [[ ${git_push} =~ "unstaged changes" ]]; then
      rocket || error ${ERROR_ROCKET}
      return 0
    elif [[ ${git_push} =~ "Could not read from remote repository" ]];then
        step_error
        error ${ERROR_ACCESS}
        return 1
    else
      # BUG PUSH
      echo -e "\n $RED NEW PUSH ERROR :: ${git_push} :: $COLOR_NONE"
      error "${ERROR_PUSH}"
      return 1
    fi
}

function pull()
{
  echo -en " $COLOR_LIGHT_GRAY Pull from remote $COLOR_NONE \t\t"
  git_pull=$(git pull --rebase 2>&1)

  if [[ ${git_pull} =~ "is up to date" ]]; then
    step_success
    return 0
  elif [[ ${git_pull} =~ "please commit or stash them" ]]; then
    step_wait
    stash || return 1
    return 0
  elif [[ ${git_pull} =~ "rewinding head to replay your work on top of it" ]]; then
    step_wait
    pull || return 1
    return 0
  elif [[ ${git_pull} =~ "Pulling is not possible because you have unmerged files" ]]; then
    step_error
    error ${ERROR_UNMERGEDFILES}
    return 1
  elif [[ ${git_pull} =~ "internal API unreachable" ]]; then
    step_error
    error ${ERROR_UNREACHABLE}
    return 1
  else
    # BUG PULL
    error "${ERROR_PULL}"
    echo -e "\n $RED NEW PULL ERROR :: ${git_pull} :: $COLOR_NONE"
    return 1
  fi
}

function stash()
{
    echo -en " $COLOR_LIGHT_GRAY Stashing your work $COLOR_NONE \t\t"
    git_stash=$(git stash)
    echo -e "$COLOR_LIGHT_GREEN [‚úîÔ∏é] $COLOR_NONE"
    pull || return 1
    echo -en " $COLOR_LIGHT_GRAY Stash applying $COLOR_NONE \t\t"
    git_stash=$(git stash pop)
    echo -e "$COLOR_LIGHT_GREEN [‚úîÔ∏é] $COLOR_NONE"
    return 0
}

function reset()
{
  echo -ne "\n\t\033[0;37m‚ùå Want to reset all or a file? [y/n/namefile] $COLOR_NONE"
  read proceeded
  case "$proceeded" in
    y | yes | yep | yep! | yup! | yup | ouaip | zyva | 1 | true)
      (git reset HEAD && git checkout .) || {
        error ${ERROR_RESET}
        return 1
      }
      # RAINBOW COLOR
      echo -e "\n\t\033[0;36müåû \033[0;1;94;105m Have \033[0;97;44m a nice \033[0;97;101m day! Ô∏è$COLOR_NONE"
      return 1 # to stop execution
      ;;
    n | no | nope | np | nein | 0 | false)
      echo -e "\n\t\033[5;33m‚ö†Ô∏è \033[0;1;33m Don't forget to commit dude! Ô∏è$COLOR_NONE"
      return 1 # to stop execution
      ;;
    * )
      (git reset HEAD "$proceeded" && git checkout "$proceeded") || {
        error ${ERROR_RESET}
        return 1
      }
      echo -e " $COLOR_DARK_GRAY The file has been reset. $COLOR_NONE"
      return 0
      ;;
  esac
}

function rocket() 
{
    # throws errors and success,
    # so just stop execution if something is thrown
    before_commit || return 1
    commit $1 || return 1
    pull || return 1
    push || return 1
    return 0
}

function sync()
{
    before_commit || return 1
    pull || return 1
    push || return 1
    return 0
}

##################################################################
# INCLUDES

function include() {
    DIR="${BASH_SOURCE%/*}"
    if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
    ##################################################################
    # COLORS
    . ${DIR}/src/assets/colors.sh || . /src/assets/colors.sh

    ##################################################################
    # ERRORS & SUCCESS VARS
    . ${DIR}/src/assets/flags.sh || . /src/assets/flags.sh

    ##################################################################
    # DISPLAY (Help, Version, Header)
    . ${DIR}/src/display.sh || . /src/display.sh

    ##################################################################
    # SELECT
    . ${DIR}/src/select.sh || . /src/select.sh

    ##################################################################
    # MESSENGER
    . ${DIR}/src/messenger.sh || . /src/messenger.sh
}


##################################################################
# MAIN

GitRocket()
{
  include
  header

  # myarray=(one two three)
  # case "${myarray[@]}" in  *"two"*) echo "found" ;; esac

## New branch?

  # HELP or INITIAL COMMIT - variable 1
  case "$1" in
    v)
      version
      ;;
    c)
    # CLONE GIT REPO - variable 2 = folder for git repo
      clone "$2"
      return 0
      ;;
    i)
      # INITIAL COMMIT
      initCommit
      return 0
      ;;
    p)
      pull && success "${SUCCESS_PULL}"
      return 0
      ;;
    s)
      sync && success "$SUCCESS_PUSH"
      return 0
      ;;
    m)
      # Errors thrown inside the rocket
      rocket && success "$SUCCESS_PUSH"
      return 0
      ;;
    ma)
      # Errors thrown inside the rocket
      rocket "agree" && success "$SUCCESS_PUSH"
      return 0
      ;;
    update)
       updateGit
       return 0
       ;;
    *)
    # HELP
      help
      return 0
      ;;
  esac
  return 0
}
